<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tenco.indiepicter.runningschedule.RunningScheduleRepository">

    <!-- 오프라인 상영 일정 등록 -->
    <insert id="insert">
        insert into running_schedule_tb (running_time, running_date, start_time, end_time, movie_id, theater_id)
        values (#{runningTime}, #{runningDate}, #{startTime}, #{endTime}, #{movieId}, #{theaterId})
    </insert>

    <!-- 오프라인 상영 일정 수정 -->
    <update id="updateById">
        update running_schedule_tb set
        running_time = #{runningTime}, running_date = #{runningDate}, start_time = #{startTime}, end_time = #{endTime}, movie_id = #{movieId}, theater_id = #{theaterId},
        where id = #{id}
    </update>

    <!-- 오프라인 상영 일정 삭제 -->
    <delete id="deleteById">
        delete from running_schedule_tb where id = #{id}
    </delete>

    <!-- 특정 영화와 특정 날짜의 오프라인 상영 일정 조회 -->
    <select id="findByMovieIdAndRunningDate" resultType="com.tenco.indiepicter.runningschedule.RunningSchedule">
        SELECT id, running_date, movie_id, theater_id
        FROM  running_schedule_tb
        WHERE movie_id = #{movieId} AND running_date LIKE #{selectDay}'%'
        ORDER BY running_date ASC;
    </select>

    <!-- 특정 영화의 오프라인 상영 일정 기간 조회 -->
    <select id="findByMovieId" resultType="com.tenco.indiepicter.runningschedule.RunningSchedule">
        select running_date, movie_id, theater_id from running_schedule_tb
        where movie_id = #{movieId}
        order by running_date asc ;
    </select>

    <!-- 오프라인 상영 일정 전체 조회 -->
    <select id="findAll" resultType="com.tenco.indiepicter.runningschedule.RunningSchedule">
        select * from running_schedule_tb;
    </select>


</mapper>